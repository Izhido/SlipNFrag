#pragma once

#include <android_native_app_glue.h>
#include "PermissionsGrantStatus.h"
#include "AppMode.h"
#include "Instance.h"
#include "Device.h"
#include "Context.h"
#include "Buffer.h"
#include "BufferWithOffset.h"
#include "TwinKey.h"
#include "Image.h"
#include "Texture.h"
#include "SharedMemory.h"
#include "SharedMemoryTexture.h"
#include "Allocation.h"
#include "AllocationList.h"
#include "TextureFromAllocation.h"
#include "LoadedTexture.h"
#include "LoadedSharedMemoryTexture.h"
#include "LoadedTextureFromAllocation.h"
#include "LoadedColormappedTexture.h"
#include "PipelineDescriptorResources.h"
#include "UpdatablePipelineDescriptorResources.h"
#include "CachedPipelineDescriptorResources.h"
#include "CachedBuffers.h"
#include "CachedTextures.h"
#include "CachedSharedMemoryTextures.h"
#include "Pipeline.h"
#include "PipelineAttributes.h"
#include "Scene.h"
#include "PerImage.h"
#include "Framebuffer.h"
#include "ColorSwapChain.h"
#include "View.h"
#include "ConsolePerImage.h"
#include "ConsoleFramebuffer.h"
#include "ConsoleColorSwapChain.h"
#include "ConsoleView.h"
#include "Console.h"
#include "Panel.h"
#include "Screen.h"

struct AppState
{
	ovrJava Java;
	ANativeWindow *NativeWindow;
	AppMode Mode;
	AppMode PreviousMode;
	bool StartupButtonsPressed;
	bool Resumed;
	double PausedTime;
	Device Device;
	Context Context;
	ovrMobile *Ovr;
	int DefaultFOV;
	int FOV;
	Scene Scene;
	long long FrameIndex;
	double DisplayTime;
	int SwapInterval;
	int CpuLevel;
	int GpuLevel;
	int MainThreadTid;
	int RenderThreadTid;
	bool UseFragmentDensity;
	VkRenderPass RenderPass;
	std::vector<View> Views;
	ovrMatrix4f ViewMatrices[VRAPI_FRAME_LAYER_EYE_MAX];
	ovrMatrix4f ProjectionMatrices[VRAPI_FRAME_LAYER_EYE_MAX];
	float Yaw;
	float Pitch;
	float Roll;
	float Scale;
	int ScreenWidth;
	int ScreenHeight;
	int ConsoleWidth;
	int ConsoleHeight;
	Panel LeftArrows;
	Panel RightArrows;
	Screen Screen;
	Console Console;
	std::vector<float> ConsoleVertices;
	std::vector<uint16_t> ConsoleIndices;
	int FloorWidth;
	int FloorHeight;
	std::vector<uint32_t> FloorData;
	std::vector<uint32_t> NoGameDataData;
	double PreviousTime;
	double CurrentTime;
	uint32_t PreviousLeftButtons;
	uint32_t PreviousRightButtons;
	uint32_t LeftButtons;
	uint32_t RightButtons;
	ovrVector2f PreviousLeftJoystick;
	ovrVector2f PreviousRightJoystick;
	ovrVector2f LeftJoystick;
	ovrVector2f RightJoystick;
	bool NearViewModel;
	double TimeInWorldMode;
	bool ControlsMessageDisplayed;
	bool ControlsMessageClosed;

	void RenderScene(VkCommandBufferBeginInfo& commandBufferBeginInfo, ovrPosef& pose, const ovrQuatf& orientation, int eyeTextureWidth, int eyeTextureHeight, VkDeviceSize& noOffset);
};
